plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp'
    id 'com.arnyminerz.locator' version '1.0.2'
    id 'io.sentry.android.gradle'
    id 'kotlin-parcelize'
}

android {
    namespace 'com.arnyminerz.filmagentaproto'
    compileSdk 33

    defaultConfig {
        applicationId "com.arnyminerz.filmagentaproto"
        minSdk 24
        targetSdk 33

        def versionPropsFile = new File(rootDir, 'version.properties')
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def runTasks = gradle.startParameter.taskNames
        def isRelease = 'assembleRelease' in runTasks || 'bundleRelease' in runTasks
        def code = versionProps['VERSION_CODE'].toInteger() + (isRelease ? 1 : 0)
        def name = versionProps['VERSION_NAME']
        if (isRelease) {
            versionProps['VERSION_CODE'] = code.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        }

        versionCode code
        versionName name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        ksp {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }

        def properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        buildConfigField "String", "HOST", "\"${properties.getProperty("host")}\""

        buildConfigField "String", "DB_HOSTNAME", "\"${properties.getProperty("db.hostname")}\""
        buildConfigField "Integer", "DB_PORT", "${properties.getProperty("db.port")}"
        buildConfigField "String", "DB_DATABASE", "\"${properties.getProperty("db.database")}\""
        buildConfigField "String", "DB_USERNAME", "\"${properties.getProperty("db.username")}\""
        buildConfigField "String", "DB_PASSWORD", "\"${properties.getProperty("db.password")}\""

        buildConfigField "String", "WOO_CONSUMER_KEY", "\"${properties.getProperty("woo.consumer_key")}\""
        buildConfigField "String", "WOO_CONSUMER_SECRET", "\"${properties.getProperty("woo.consumer_secret")}\""

        buildConfigField "String", "SENTRY_DSN", "\"${properties.getProperty("SENTRY_DSN")}\""

        buildConfigField "String", "AES_KEY", "\"${properties.getProperty("AES_KEY")}\""
        buildConfigField "String", "AES_SALT", "\"${properties.getProperty("AES_SALT")}\""
        buildConfigField "String", "AES_IV", "\"${properties.getProperty("AES_IV")}\""
    }

    // Configures the APK and AAB signing config
    signingConfigs {
        release {
            def props = new Properties()
            file("${rootDir}/local.properties").withInputStream { props.load(it) }

            storeFile file("${rootDir}/keystore.jks")
            storePassword props.getProperty("SIGNING_KEYSTORE_PASSWORD")
            keyAlias props.getProperty("SIGNING_KEY_ALIAS")
            keyPassword props.getProperty("SIGNING_KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            buildConfigField "String", "TPVV_TERMINAL", "\"001\""
            buildConfigField "String", "TPVV_LICENSE", "\"sq7HjrUOBfKmC576ILgskD5srU870gJ7\""
            buildConfigField "String", "TPVV_COMM_ID", "\"999008881\""
            buildConfigField "String", "TPVV_COMM_NM", "\"999008881\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            def properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())

            buildConfigField "String", "TPVV_TERMINAL", "\"${properties.getProperty("TPVV_TERMINAL")}\""
            buildConfigField "String", "TPVV_LICENSE", "\"${properties.getProperty("TPVV_LICENSE")}\""
            buildConfigField "String", "TPVV_COMM_ID", "\"${properties.getProperty("TPVV_COMM_ID")}\""
            buildConfigField "String", "TPVV_COMM_NM", "\"${properties.getProperty("TPVV_COMM_NM")}\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs = ["-Xcontext-receivers"]
    }
    buildFeatures {
        buildConfig true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "$compose_version"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/*'
        }
    }
}

dependencies {
    def lifecycle_version = "2.6.1"

    implementation 'androidx.core:core-ktx:1.10.0'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation 'androidx.activity:activity-compose:1.7.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'

    def composeBom = platform('androidx.compose:compose-bom:2023.04.01')
    implementation composeBom
    androidTestImplementation composeBom

    // Jetpack Compose - Base
    implementation "androidx.compose.ui:ui"
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'

    // Jetpack Compose - Material 3
    implementation 'androidx.compose.material3:material3:1.1.0-rc01'

    // Jetpack Compose - Icons
    implementation 'androidx.compose.material:material-icons-extended'
    implementation 'br.com.devsrsouza.compose.icons.android:simple-icons:1.0.0'

    // Jetpack Compose - Integrations
    implementation 'androidx.activity:activity-compose:1.7.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.6.1'
    implementation 'androidx.compose.runtime:runtime-livedata'
    implementation "androidx.compose.ui:ui-text-google-fonts:1.4.3"

    // Jetpack Compose - Accompanist
    implementation "com.google.accompanist:accompanist-permissions:0.30.1"

    // For using MS SQL databases
    implementation 'net.sourceforge.jtds:jtds:1.3.1'

    // For loading images
    implementation("io.coil-kt:coil:2.3.0")
    implementation("io.coil-kt:coil-compose:2.3.0")

    // For storing preferences
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    // For launching web browsers
    implementation "androidx.browser:browser:1.5.0"

    // Room Database
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    ksp "androidx.room:room-compiler:$room_version"

    implementation "androidx.work:work-runtime-ktx:2.8.1"

    // For creating QR codes
    implementation 'com.google.zxing:core:3.5.1'

    // For scanning QR codes
    implementation 'com.google.mlkit:barcode-scanning:17.1.0'

    // CameraX dependency
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"

    // Logging library
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // AndroidX LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // Redsys payments
    implementation(name: 'sdkinapp-library', ext: 'aar')

    // Dependencies required by Redsys)
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.android.volley:volley:1.2.1'

    // Import modules
    implementation project(":core")

    // Unit test implementations
    testImplementation 'junit:junit:4.13.2'
    testImplementation "io.mockk:mockk-android:${mockk_version}"
    testImplementation "io.mockk:mockk-agent:${mockk_version}"

    // Android test implementations
    androidTestImplementation "io.mockk:mockk-android:${mockk_version}"
    androidTestImplementation "io.mockk:mockk-agent:${mockk_version}"
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.5'
    androidTestImplementation "androidx.test:runner:1.5.2"
    androidTestImplementation "androidx.test:rules:1.5.0"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:core-ktx:1.5.0'
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    androidTestImplementation 'androidx.work:work-testing:2.8.1'
    debugImplementation "androidx.compose.ui:ui-tooling"
    debugImplementation "androidx.compose.ui:ui-test-manifest"
}